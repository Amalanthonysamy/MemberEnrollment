basePath: /
definitions:
  store.BusinessUnit:
    properties:
      businessType:
        type: string
      businessUnitCode:
        type: string
      businessUnitDescription:
        type: string
      businessUnitName:
        type: string
    type: object
  store.Member:
    properties:
      businessUnit:
        $ref: '#/definitions/store.BusinessUnit'
      createdAt:
        type: string
      dob:
        type: string
      effectiveDate:
        type: string
      email:
        type: string
      endDate:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      memberCode:
        type: string
      phoneNumber:
        type: string
      planDetails:
        $ref: '#/definitions/store.PlanProduct'
      updatedAt:
        type: string
    type: object
  store.PlanProduct:
    properties:
      planProductCode:
        type: string
      planProductDescription:
        type: string
      planProductName:
        type: string
    type: object
host: localhost:7177
info:
  contact:
    email: parameswaribala@gmail.com
    name: API Support
  description: This is api service for managing Claims
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Claim API
  version: "1.0"
paths:
  /members/v1.0:
    get:
      consumes:
      - application/json
      description: Returns list of members
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Member'
            type: array
      summary: Get all members
      tags:
      - members
    post:
      consumes:
      - application/json
      description: Adds a new member
      parameters:
      - description: Member to create
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/store.Member'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Member'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new member
      tags:
      - members
  /members/v1.0/{memberid}:
    delete:
      consumes:
      - application/json
      description: Delete requested member
      parameters:
      - description: ID of the Member
        in: path
        name: memberid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Member'
        "400":
          description: Invalid ID supplied
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Member not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete requested member
      tags:
      - members
    get:
      consumes:
      - application/json
      description: Get details of requested member
      parameters:
      - description: ID of the Member
        in: path
        name: memberid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Member'
        "400":
          description: Invalid ID supplied
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Member not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get details of requested member
      tags:
      - members
    put:
      consumes:
      - application/json
      description: Update existing member with the input payload
      parameters:
      - description: ID of the Member to update
        in: path
        name: memberid
        required: true
        type: integer
      - description: Updated member fields
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/store.Member'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Member'
        "400":
          description: Invalid ID supplied
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Member not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update existing member
      tags:
      - members
swagger: "2.0"
